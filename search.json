[{"title":"HTML-常用API","url":"http://yoursite.com/2017/08/12/HTML-常用API/","content":"<h1 id=\"Web-Storage\"><a href=\"#Web-Storage\" class=\"headerlink\" title=\"Web Storage\"></a>Web Storage</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><ol>\n<li>sessionStorage 会话存储（关闭当前窗口或浏览器即清除）</li>\n<li>localStorage 本地存储（永久存储在当前浏览器）</li>\n</ol>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ol>\n<li>length：只读，返回存储在 Storage 对象中的数据项数量。</li>\n</ol>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ol>\n<li>key()：接受一个数值 n 作为参数，并返回存储中的第 n 个键名</li>\n<li>getItem()：该方法接受一个键名作为参数，返回键名对应的值。</li>\n<li>setItem()：该方法接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。</li>\n<li>removeItem()：该方法接受一个键名作为参数，并把该键名从存储中删除。</li>\n<li>clear()：调用该方法会清空存储中的所有键名。</li>\n</ol>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>当值发生改变或者clear时，会发生storage事件（sessionStorage没有该事件）</p>\n<p>通过storage事件可以获取以下几个属性</p>\n<ol>\n<li>storageArea: 表示存储类型（Session或Local）</li>\n<li>key:发生改变项的key</li>\n<li>oldValue: key的原值</li>\n<li>newValue: key的新值</li>\n<li>url*: key改变发生的URL</li>\n</ol>\n<h2 id=\"与cookie的区别\"><a href=\"#与cookie的区别\" class=\"headerlink\" title=\"与cookie的区别\"></a>与cookie的区别</h2><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>Cookie</th>\n<th>localStorage</th>\n<th>sessionStorage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据的生命期</td>\n<td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td>\n<td>除非被清除，否则永久保存</td>\n<td>仅在当前会话下有效，关闭页面或浏览器后被清除</td>\n</tr>\n<tr>\n<td>存放数据大小</td>\n<td>4K左右</td>\n<td>一般为5MB</td>\n<td>同左</td>\n</tr>\n<tr>\n<td>与服务器端通信</td>\n<td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td>\n<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>\n<td>同左</td>\n</tr>\n<tr>\n<td>易用性</td>\n<td>需要程序员自己封装，源生的Cookie接口不友好</td>\n<td>源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td>\n<td>同左</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"indexedDB\"><a href=\"#indexedDB\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h1><p>该数据库是一种存储在客户端本地的 NoSQL 数据库，它可以存储大量的数据。相对于storage存取简单数据，indexedDB适用于存取大量结构化数据。</p>\n<p>由于没使用过，更多请参考<a href=\"https://github.com/lin-xin/blog/issues/12\" target=\"_blank\" rel=\"external\">HTML5 进阶系列：indexedDB 数据库</a></p>\n<h1 id=\"Web-Drag\"><a href=\"#Web-Drag\" class=\"headerlink\" title=\"Web Drag\"></a>Web Drag</h1><p>该api实现了拖拽的事件，在这以前主要是通过mousedown、mousemove和mouseup来实现拖拽；</p>\n<h2 id=\"drag事件\"><a href=\"#drag事件\" class=\"headerlink\" title=\"drag事件\"></a>drag事件</h2><ol>\n<li>拖放源元素：dragSource<ul>\n<li>dragStart:拖拽开始事件</li>\n<li>drag：拖拽事件</li>\n<li>dragEnd：拖拽结束事件</li>\n</ul>\n</li>\n<li>拖放目标元素：dragTarget<ul>\n<li>dragEnter：拖拽进入目标事件</li>\n<li>dragOver：在目标元素上移动时触发的事件</li>\n<li>drop：在目标元素上释放事件</li>\n<li>dragleave：拖拽离开事件</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"drag时传递数据\"><a href=\"#drag时传递数据\" class=\"headerlink\" title=\"drag时传递数据\"></a>drag时传递数据</h2><p>拖拽时源元素和目标元素之间的数据传递需要使用拖拽事件的dataTransfer对象</p>\n<ol>\n<li>获取方式：e.dataTransfer</li>\n<li>设置值：e.dataTransfer.setData(key,value)</li>\n<li>获取值：e.dataTransfer.getData(key)</li>\n<li>删除值：e.dataTransfer.clearData(key)</li>\n<li>e.dataTransfer.setDragImage(img,x,y)在拖放过程中，修改鼠标指针所指向的图像</li>\n</ol>\n<p><strong>利用dataTransfer来传递数据，目标阶段必须要在dragEnter、dragOver、drop事件中调用e.preventDefault(),这样才能正常完成拖放动作。</strong></p>\n<h1 id=\"Web-Socket\"><a href=\"#Web-Socket\" class=\"headerlink\" title=\"Web Socket\"></a>Web Socket</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>客户端与服务器端之间非http的通信机制</p>\n<ol>\n<li>全双工连接类型的网络协议</li>\n<li>特点是实时、高效，永久</li>\n<li>使用场景：聊天室、即时游戏</li>\n</ol>\n<h2 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>readyState：代表当前连接的状态</p>\n<p>用法：WebSocket.CONNECTING</p>\n<ol>\n<li>CONNECTING:值0，正在连接中</li>\n<li>OPEN:1,已连接</li>\n<li>CLOSING：2，正在断开连接</li>\n<li>CLOSED:3，已断开连接</li>\n</ol>\n<h2 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ol>\n<li>send(‘msg’) : 给服务器发消息</li>\n<li>close() ：关闭连接</li>\n</ol>\n<h2 id=\"事件-1\"><a href=\"#事件-1\" class=\"headerlink\" title=\"事件\"></a>事件</h2><ol>\n<li>open：打开连接，创建连接</li>\n<li>close：关闭连接</li>\n<li>message：来消息</li>\n<li>error：错误事件</li>\n</ol>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>使用node.js + faye-websocket-node</p>\n<ol>\n<li><p>服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//执行以下命令</div><div class=\"line\">mkdir nodejs-faye-websocket</div><div class=\"line\">cd nodejs-faye-websocket</div><div class=\"line\">npm install faye-websocket</div><div class=\"line\">app.js</div><div class=\"line\">node app.js</div></pre></td></tr></table></figure>\n</li>\n<li><p>客户端</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">function checkBrowser()&#123;</div><div class=\"line\">    if(window.WebSocket)&#123;</div><div class=\"line\">    \tlog(&apos;该浏览器支持WebSocket！&apos;)</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">    \tlog(&apos;该浏览器不支持WebSocket！&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//创建并设置websocket</div><div class=\"line\">function setup()&#123;</div><div class=\"line\">\t//创建websocket</div><div class=\"line\">\tvar ws = new WebSocket(&apos;ws://localhost:3001&apos;);</div><div class=\"line\">\t</div><div class=\"line\">\t//通过4个事件做响应处理</div><div class=\"line\">\t//通过2个方法发送消息send或关闭连接close</div><div class=\"line\">\t//通过readyState属性判断连接状态</div><div class=\"line\">\tws.onopen = function(e)&#123;</div><div class=\"line\">\t\t//连接成功</div><div class=\"line\">\t\tlog(&apos;连接到服务器成功！&apos;,e);</div><div class=\"line\">\t\tsendMessage(&apos;hello,websocket&apos;);//发送消息给服务器</div><div class=\"line\">\t\tconsole.log(ws.readyState);//输出当前连接状态</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//接收消息事件</div><div class=\"line\">\tws.onmessage = function(e)&#123;</div><div class=\"line\">\t\tlog(&apos;RECEIVE:&apos;+e.data,e);</div><div class=\"line\">\t\tws.close();//关闭连接方法</div><div class=\"line\">\t\tconsole.log(ws.readyState);//输出当前连接状态</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//连接关闭事件</div><div class=\"line\">\tws.onclose = function(e)&#123;</div><div class=\"line\">\t\tlog(&apos;Disconnected:&apos;,e);</div><div class=\"line\">\t\tconsole.log(ws.readyState);//输出当前连接状态</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//错误事件</div><div class=\"line\">\tws.onerror = function(e)&#123;</div><div class=\"line\">\t\tlog(&apos;Error&apos;,e);</div><div class=\"line\">\t\tconsole.log(ws.readyState);//输出当前连接状态</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t//给服务器发送消息方法</div><div class=\"line\">\tvar sendMessage = function (msg)&#123;</div><div class=\"line\">\t\tws.send(msg);//发送消息给服务器</div><div class=\"line\">\t\tlog(&apos;SEND:&apos;+msg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;\t\t</div><div class=\"line\"></div><div class=\"line\">//输入信息log函数:第一个参数代表消息，第二个参数代表相关事件</div><div class=\"line\">function log(s,e)&#123;</div><div class=\"line\">\t//获取output元素</div><div class=\"line\">\tvar output = document.getElementById(&apos;output&apos;);</div><div class=\"line\">\tvar p = document.createElement(&apos;p&apos;);//创建段落</div><div class=\"line\">\tp.style.wordWrap = &apos;break-word&apos;;//自动换行</div><div class=\"line\">\tp.style.padding = &apos;10px&apos;;//边距</div><div class=\"line\">\tp.style.background = &apos;#eee&apos;;//背景色</div><div class=\"line\">\tp.innerHTML = s;//设置文本信息</div><div class=\"line\">\toutput.appendChild(p);//追加到output中</div><div class=\"line\">\tconsole.log(s,e);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">checkBrowser();//检测兼容性</div><div class=\"line\">setup();//创建websocket连接</div></pre></td></tr></table></figure>\n<h1 id=\"Web-Worker\"><a href=\"#Web-Worker\" class=\"headerlink\" title=\"Web Worker\"></a>Web Worker</h1><h2 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>web worker是模拟多线程的一个概念；它有以下几个优缺点：</p>\n<ol>\n<li>能实现js里面的多线程</li>\n<li>提高页面性能（不影响页面的性能）</li>\n<li>防止页面发生假死行为</li>\n<li>充分利用多核cpu的优势</li>\n<li>不能访问web页面、DOM API、全局变量</li>\n<li>可以使用setTimeout以及XMLHttpRequest通信</li>\n</ol>\n<p>另外Web workers可分为两种类型：专用线程dedicated web worker，以及共享线程shared web worker。</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>通过主线程和子线程之间信息的相互传递，来达到主线程负责页面效果实现，子线程（worker）负责复杂的运算，从而实现多线程（充分利用cpu，防页面假死）</p>\n<ol>\n<li>主线程postMessage，让worker做复杂的运算</li>\n<li>子线程onmessage，做运算并将运算的结果postMessage给主线程</li>\n<li>主线程onmessage接收结果，然后实现</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 创建 var woker = new Worker(&apos;myworker.js&apos;);</div><div class=\"line\">   注意：myworker.js必须是单独js文件</div><div class=\"line\">2. 主线程和worker之间通信 worker.postMessage(msg);</div><div class=\"line\">3. 监听消息事件 worker.onmessage = function(e)&#123;....&#125;</div><div class=\"line\">4. 停止 worker: worker.terminate()</div></pre></td></tr></table></figure>\n<h1 id=\"Web-Geolocation\"><a href=\"#Web-Geolocation\" class=\"headerlink\" title=\"Web Geolocation\"></a>Web Geolocation</h1><h2 id=\"概述-2\"><a href=\"#概述-2\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>使用navigator.geolocation来获取当前地理对象；使用此api经常用来引入百度或者谷歌地图。</p>\n<h2 id=\"方法-2\"><a href=\"#方法-2\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ol>\n<li>navigator.geolocation.getCurrentPosition(success,error);查看当前定位</li>\n<li>navigator.geolocation.watchPosition(success,error);监控当前位置</li>\n<li>navigator.geolocation.clearWatch()清除当前监控</li>\n</ol>\n<h1 id=\"FileReader\"><a href=\"#FileReader\" class=\"headerlink\" title=\"FileReader\"></a>FileReader</h1><h2 id=\"方法-3\"><a href=\"#方法-3\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ol>\n<li>abort():void    终止文件读取操作</li>\n<li>readAsArrayBuffer(file):void 异步按字节读取文件内容，结果用ArrayBuffer对象表示</li>\n<li>readAsBinaryString(file):void 异步按字节读取文件内容，结果为文件的二进制串</li>\n<li>readAsDataURL(file):void    异步读取文件内容，结果用data:url的字符串形式表示</li>\n<li>readAsText(file,encoding):void 异步按字符读取文件内容，结果用字符串形式表示</li>\n</ol>\n<h2 id=\"事件-2\"><a href=\"#事件-2\" class=\"headerlink\" title=\"事件\"></a>事件</h2><ul>\n<li>onabort    当读取操作被中止时调用</li>\n<li>onerror    当读取操作发生错误时调用</li>\n<li>onload    当读取操作成功完成时调用</li>\n<li>onloadend    当读取操作完成时调用,不管是成功还是失败</li>\n<li>onloadstart    当读取操作将要开始之前调用</li>\n<li>onprogress    在读取数据过程中周期性调用</li>\n</ul>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li>在线预览本地文件<br> 通过FileReader的readAsDataURL方法，将图片转换成base64编码，直接将其显示在页面上。</li>\n<li>二进制数据上传<br> HTML5基于xhr2可以直接上传下载二进制数据，无需像以往一样通过form标签由后端拉取二进制内容。<br> FileReader的readAsArrayBuffer方法将File对象转换为ArrayBuffer，然后通过xhr.sendAsBinary直接将文件的ArrayBuffer内容装填至post body后发送。</li>\n</ol>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><h2 id=\"form属性\"><a href=\"#form属性\" class=\"headerlink\" title=\"form属性\"></a>form属性</h2><ol>\n<li>method：请求方法post/get</li>\n<li>action：请求路径login.php</li>\n<li>enctype：编码方式，值为以下三种<ul>\n<li>默认为application/x-www-form-urlencoded;（此属性表示表单编码方式的设置）</li>\n<li>multipart/form-data </li>\n<li>text/plain </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"表单元素\"><a href=\"#表单元素\" class=\"headerlink\" title=\"表单元素\"></a>表单元素</h2><ol>\n<li>input：（type=）<ul>\n<li>text 文本</li>\n<li>password 密码框</li>\n<li>checkbox 多选</li>\n<li>radio 单选</li>\n<li>file 文件选择</li>\n<li>hidden 隐藏</li>\n<li>submit 提交</li>\n<li>reset 重置</li>\n<li>button 按钮</li>\n<li>email：校验时：@前后有字符即可</li>\n<li>number：属性有min，max，step；校验时必须在最大最小之间</li>\n<li>url：校验时：含http: .com即可</li>\n<li>tel：无校验</li>\n<li>color：value值为#000000；为string类型</li>\n<li>search：搜索框，目的是提供语义功能</li>\n<li>range：范围，滑动条；默认min=’1’ max=’100’ step=’1’ value=’50’</li>\n<li>date：设置可选日期范围min=’2015-09-08’ max=’2015-09-15’</li>\n<li>week：</li>\n<li>month：</li>\n<li>datetime：datetime兼容性不好，建议使用datetime-local</li>\n<li>datetime-local：</li>\n</ul>\n</li>\n<li>textarea 多行文本框</li>\n<li>select 下拉框</li>\n<li>datalist 不可见的数据列表</li>\n<li>progress 进度条</li>\n<li>meter 丈量元素</li>\n<li>output 可输出表单元素处理的结果</li>\n</ol>\n<h2 id=\"表单元素属性\"><a href=\"#表单元素属性\" class=\"headerlink\" title=\"表单元素属性\"></a>表单元素属性</h2><ol>\n<li>placeholder 占位符</li>\n<li>multiple 表示是否可以在input中输入多个值，值之间用逗号分隔即可</li>\n<li>autofocus 表示是否自动获取焦点</li>\n<li>form 表示当前标签属于哪个form</li>\n</ol>\n<h2 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h2><h3 id=\"触发验证（点击触发）\"><a href=\"#触发验证（点击触发）\" class=\"headerlink\" title=\"触发验证（点击触发）\"></a>触发验证（点击触发）</h3><ol>\n<li><code>&lt;input type=&quot;submit&quot; value=&quot;submit&quot;/&gt;</code></li>\n<li><code>&lt;button&gt;button&lt;/button&gt;</code></li>\n</ol>\n<h3 id=\"元素验证属性\"><a href=\"#元素验证属性\" class=\"headerlink\" title=\"元素验证属性\"></a>元素验证属性</h3><ul>\n<li>required：布尔值属性</li>\n<li>pattern：值为字符串格式的正则表达式<br>  注意：该校验不会检测内容必填，如果用户没有填写内容，校验不会进行。（所以最好和required组合使用）</li>\n<li>min/max/step：用于包含number、date、range等的input的验证约束</li>\n<li>minlength/maxlength：验证input的输入字符串的长度<br>  注意：minlength/maxlength是HTML5新属性，chrome较新版本才有该属性（和validity.tooShort，validity.tooLong一样）<ul>\n<li>minlength不是标准的w3c属性（未对外公布），但是却可以使用，校验信息提示的是英文，慎用。</li>\n<li>如果用编程方式给input赋值超过了规定范围，校验不会被触发，可以认为是个bug，注意。</li>\n</ul>\n</li>\n<li>validity：自定义校验的核心属性，可以通过该属性获得一个ValidityState对象，该对象有很多属性可以获得相应的校验通过的状态。<br>  注意事项：<ul>\n<li>该属性只有表单元素才有，表单没有</li>\n<li>有些浏览器没有validity.tooShort属性，导致minlength校验不能触发。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"元素禁用验证\"><a href=\"#元素禁用验证\" class=\"headerlink\" title=\"元素禁用验证\"></a>元素禁用验证</h3><ol>\n<li>novalidate：布尔值属性，form元素的属性，提交表单时不会验证</li>\n<li>formnovalidate：布尔值属性，submit类型input的属性</li>\n</ol>\n<p>注意：以上两个表面上一样的功能，实际上有区别，第二个仅用于测试，第一个是有实际用途的，比如我们要使用其他校验框架。</p>\n<h3 id=\"元素验证事件\"><a href=\"#元素验证事件\" class=\"headerlink\" title=\"元素验证事件\"></a>元素验证事件</h3><p>invalid事件</p>\n<ol>\n<li>如果加在表单元素上，则如果该元素校验未通过，会触发该事件。如果有多个元素都添加该事件，只有那些校验未通过的才能触发事件。</li>\n<li>invalid事件默认在捕获阶段和目标阶段结束后，不进行冒泡；所以目标的父元素form想要绑定事件的话，必须在捕获阶段</li>\n<li>让chrome的默认提示信息不显示event.preventDefault()</li>\n<li>使用场景：<ul>\n<li>你关心错误的那些组件事件</li>\n<li>你不关心具体什么错误</li>\n</ul>\n</li>\n<li>invalid事件的局限性：<ul>\n<li>只能找到校验错误的对象</li>\n<li>不能精确判断错误类型</li>\n</ul>\n</li>\n<li>属性：<ul>\n<li>target：验证不通过的元素</li>\n<li>type：事件类型</li>\n<li>bubbles：该事件是否为冒泡</li>\n<li>cancelable：是否可以取消该事件</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"验证对象\"><a href=\"#验证对象\" class=\"headerlink\" title=\"验证对象\"></a>验证对象</h3><p>元素的validity属性===ValidityState对象</p>\n<p>通过表单元素的validity属性获得ValidityState对象，该对象有很多属性，这些属性能够精确判断错误类型：</p>\n<h3 id=\"验证对象的属性\"><a href=\"#验证对象的属性\" class=\"headerlink\" title=\"验证对象的属性\"></a>验证对象的属性</h3><ul>\n<li>valid：合法的，该属性指出元素是否验证通过，它为true说明校验通过，否则不通过。<strong>该属性是总开关，总阀门。</strong></li>\n<li>valueMissing：未填写必填项，相应的校验属性是required</li>\n<li>patternMismatch：模式匹配错误，相对应的验证属性pattern</li>\n<li>typeMismatch：类型是否错误，典型的是email和url</li>\n<li>tooLong：对应maxlength，暂时触发不了（陷阱1，由于chrome版本低）</li>\n<li>tooShort：对应minlength，校验字符太短</li>\n<li>rangeOverflow：对应属性max</li>\n<li>rangeUnderflow:对应属性min</li>\n<li>stepMismatch：对应属性step，和step设置的值不匹配（比如值有小数点）</li>\n<li>badInput：类型转换错误，比如number里面输入字符串</li>\n<li>customError：当使用setCustomValidity方法设置自定义错误提示信息以后，该值为true，因此如果不把setCustomValidity重置为空，则验证永远无法通过。（陷阱2）</li>\n</ul>\n<h3 id=\"验证对象的方法\"><a href=\"#验证对象的方法\" class=\"headerlink\" title=\"验证对象的方法\"></a>验证对象的方法</h3><ol>\n<li>setCustomValidity(str)：该方法可以设置自定义错误提示信息<ul>\n<li>注意：只是修改chrome表单提交时默认的提示内容</li>\n<li>使用它时，务必在输入合法时把他设置为空，否则验证永远无法通过</li>\n<li>输入合法性判断千万不能用checkValidity()，也不能用elem.validity.valid</li>\n</ul>\n</li>\n<li>checkValidity()<br>该方法可以返回调用者校验结果，如果是元素就是元素的校验结果，如果是表单，则整个表单内部所有校验结果(相当于点击submit)。</li>\n</ol>\n<p>//调用checkValidity（）可以手动检查校验结果，等同于elem.validity.valid<br>//elem.checkValidity()  == elem.validity.valid</p>\n<h3 id=\"自定义验证\"><a href=\"#自定义验证\" class=\"headerlink\" title=\"自定义验证\"></a>自定义验证</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//$表示jQuery</div><div class=\"line\">$(&apos;input:eq(0)&apos;).bind(&#123;</div><div class=\"line\">    blur:function()&#123;</div><div class=\"line\">\t\tif(!this.validity.valid)&#123;</div><div class=\"line\">\t\t  $(this).next().css(&apos;color&apos;,&apos;#f00&apos;);</div><div class=\"line\">\t\t\tif(this.validity.valueMissing)&#123;</div><div class=\"line\">\t\t\t\t$(this).next().html(&apos;*用户名不能为空&apos;);</div><div class=\"line\">\t\t\t&#125;else if(this.validity.tooShort)&#123;</div><div class=\"line\">\t\t\t\t$(this).next().html(&apos;用户名太短&apos;);</div><div class=\"line\">\t\t\t&#125;else if(this.validity.tooLong)&#123;</div><div class=\"line\">\t\t\t\t$(this).next().html(&apos;用户名太长&apos;);</div><div class=\"line\">\t\t\t&#125;else if(this.validity.patternMismatch)&#123;</div><div class=\"line\">\t\t\t\t$(this).next().html(&apos;用户名格式错误&apos;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tfocus:function()&#123;\t</div><div class=\"line\">\t\t$(this).next().html(&apos;请输入用户名，数字5~10位&apos;).css(&apos;color&apos;,&apos;#333&apos;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"video\"><a href=\"#video\" class=\"headerlink\" title=\"video\"></a>video</h1><h2 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h2><ol>\n<li>相比较flash，浏览器原生支持，且性能比较好</li>\n<li>支持的视频格式： mp4，ogv和webm（网页唯一超高清的视频格式）</li>\n<li>使用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;video src=&apos;../data/oceans-clip.mp4&apos; controls poster=&apos;Koala.jpg&apos;&gt;</div><div class=\"line\">    &lt;!-- 多个视频源（以防浏览器不支持某种格式） --&gt;</div><div class=\"line\">    &lt;source src=&apos;../data/oceans-clip.mp4&apos;&gt;  </div><div class=\"line\">    &lt;source src=&apos;../data/oceans-clip.ogv&apos;&gt;</div><div class=\"line\">    &lt;source src=&apos;../data/oceans-clip.webm&apos;&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;!-- 视频无法播放时显示的内容 --&gt;</div><div class=\"line\">    可能由于浏览器的不支持，导致视频无法播放，请升级您的浏览器</div><div class=\"line\">&lt;/video&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"标签属性\"><a href=\"#标签属性\" class=\"headerlink\" title=\"标签属性\"></a>标签属性</h2><ol>\n<li>src：视频源</li>\n<li>width：定义宽</li>\n<li>height：定义高</li>\n<li>autoplay：只需属性名，无需属性值；用于设置是否自动播放</li>\n<li>controls：是否显示控件</li>\n<li>loop：是否重复播放</li>\n<li>autobuffer：是否自动缓冲</li>\n<li>poster：其值为一张图片的url；表示在播放视频之前，显示一张图片（高宽需和视频一致）</li>\n<li>preload：<ul>\n<li>auto，要求浏览器尽快下载当前视频</li>\n<li>none，不缓存视频（某些教育网站的视频不让缓存在本地）</li>\n<li>metadata，播放前只加载视频的高宽及其他信息</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"video事件\"><a href=\"#video事件\" class=\"headerlink\" title=\"video事件\"></a>video事件</h2><ol>\n<li>play：当播放当前视频时触发</li>\n<li>pause：当暂停当前视频时触发</li>\n<li>ended：当当前视频结束播放时触发</li>\n<li>error：当当前视频播放出错时触发</li>\n<li>canplay：当播放视频，同时下载视频（当前视频可以播放）</li>\n<li>canplaythrough：整个视频可以顺利播放（下载完毕）</li>\n<li>progess：用于更新媒体的下载进度，会周期性的触发</li>\n</ol>\n<h2 id=\"video对象方法\"><a href=\"#video对象方法\" class=\"headerlink\" title=\"video对象方法\"></a>video对象方法</h2><ol>\n<li>play()：用于播放当前视频（自定义控件时很有用）</li>\n<li>pause()：用于暂停当前视频（自定义控件时很有用）</li>\n<li>load()：用于加载视频文件</li>\n<li>canplayType()：判断浏览器是否支持某些视频格式</li>\n</ol>\n<h2 id=\"video对象属性\"><a href=\"#video对象属性\" class=\"headerlink\" title=\"video对象属性\"></a>video对象属性</h2><ol>\n<li>paused：返回布尔值，表示当前视频是否为暂停状态</li>\n<li>play：返回布尔值，表示当前视频是否为播放状态</li>\n<li>ended：返回布尔值，播放结束为true</li>\n<li>duration：返回当前视频的时长，单位为秒</li>\n<li>currentTime：返回播放视频的当前位置</li>\n</ol>\n<h2 id=\"做一个自定义视频插件\"><a href=\"#做一个自定义视频插件\" class=\"headerlink\" title=\"做一个自定义视频插件\"></a>做一个自定义视频插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 1. 获取播放视频的button按钮</div><div class=\"line\">var btn = document.getElementById(&quot;play&quot;);</div><div class=\"line\">// 2. 获取&lt;video&gt;元素</div><div class=\"line\">var mmedia = document.getElementById(&quot;mmedia&quot;);</div><div class=\"line\">// 3. 为button按钮绑定事件</div><div class=\"line\">btn.onclick = function()&#123;</div><div class=\"line\">\t// 判断当前视频是播放状态还是暂停状态</div><div class=\"line\">\tif(mmedia.paused &amp;&amp; !mmedia.ended)&#123; // 当前是暂停状态</div><div class=\"line\">\t\t// 实现播放视频功能</div><div class=\"line\">\t\tmmedia.play();</div><div class=\"line\">\t\t// 修改button显示内容</div><div class=\"line\">\t\tbtn.innerHTML = &quot;Pause&quot;;</div><div class=\"line\">\t\t// 动态控制进度条</div><div class=\"line\">\t\tt = setInterval(&quot;changeStatus();&quot;,1000);</div><div class=\"line\">\t&#125;else&#123;\t// 当前是播放状态</div><div class=\"line\">\t\tmmedia.pause();</div><div class=\"line\">\t\tbtn.innerHTML = &quot;Play&quot;;</div><div class=\"line\">\t\tclearInterval(t);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 定义进度条的总宽度</div><div class=\"line\">var maxwidth = 600;</div><div class=\"line\">// 获取进度条元素</div><div class=\"line\">var progress = document.getElementById(&quot;progress&quot;);</div><div class=\"line\">// 该函数用于动态控制进度条</div><div class=\"line\">function changeStatus()&#123;</div><div class=\"line\">\t// 判断当前视频是否播放完毕</div><div class=\"line\">\tif(!mmedia.ended)&#123;</div><div class=\"line\">\t\t// 1. 获取当前视频时长对应的宽度</div><div class=\"line\">\t\tvar size = mmedia.currentTime*maxwidth/mmedia.duration;</div><div class=\"line\">\t\t// 2. 将HTML页面表示进度条的元素的width设置为计算的结果</div><div class=\"line\">\t\tprogress.style.width = size + &quot;px&quot;;</div><div class=\"line\">\t&#125;else&#123;</div><div class=\"line\">\t\t// 清除setInterval()定时器</div><div class=\"line\">\t\tclearInterval(t);</div><div class=\"line\">\t\t// 将页面进度条的样式清空</div><div class=\"line\">\t\tprogress.style.width = 0 + &quot;px&quot;;</div><div class=\"line\">\t\t// 将button按钮的文本修改为Play</div><div class=\"line\">\t\tbtn.innerHTML = &quot;Play&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"audio\"><a href=\"#audio\" class=\"headerlink\" title=\"audio\"></a>audio</h1><p>audio支持mp3，ogg，wav三种音频格式，其他用法（标签属性，事件，对象方法，对象属性，包括自定义控件）与video完全一致。</p>\n<h1 id=\"canvas，svg和webGL\"><a href=\"#canvas，svg和webGL\" class=\"headerlink\" title=\"canvas，svg和webGL\"></a>canvas，svg和webGL</h1><p>canvas和svg都是HTML中用于图形技术；但两者又有明显的用途区分：</p>\n<ol>\n<li>canvas基于像素，只能脚本驱动，适合像素处理，动态渲染和大数据量绘制（多用于游戏）；</li>\n<li>svg基于矢量，适合静态图片展示，高保真文档查看和打印的应用场景；</li>\n<li>webGL常用于实现3D效果；<br>因为本人没有使用过，所以不做概述。</li>\n</ol>\n","categories":["前端"],"tags":["HTML"]},{"title":"HTML-常用标签","url":"http://yoursite.com/2017/08/06/HTML-常用标签/","content":"<p><strong>使用HTML标签最重要的一点就是语义化</strong></p>\n<h1 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h1><ol>\n<li>语义化目的：<ol>\n<li>让机器（搜索引擎）易于理解，利于SEO；</li>\n<li>阅读代码的人能够很容易理解网页各个模块并维护；</li>\n</ol>\n</li>\n<li>语义化姿势：<ol>\n<li>尽量使用含语义信息的标签，例如header,nav,aside,section；</li>\n<li>标题、段落、列表等标签严格区分，不要滥用；</li>\n<li>内容结构化，去掉css也具有清晰可读的结构；</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"文档标签\"><a href=\"#文档标签\" class=\"headerlink\" title=\"文档标签\"></a>文档标签</h1><ol>\n<li>html lang属性声明语言</li>\n<li>head<ul>\n<li>meta</li>\n<li>title</li>\n<li>link</li>\n<li>style</li>\n<li>base</li>\n</ul>\n</li>\n<li>body<ul>\n<li>script</li>\n<li>noscript</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"布局标签\"><a href=\"#布局标签\" class=\"headerlink\" title=\"布局标签\"></a>布局标签</h1><ol>\n<li>div, span</li>\n<li>main, header, footer, section, nav</li>\n<li>article, aside</li>\n</ol>\n<h1 id=\"表格标签\"><a href=\"#表格标签\" class=\"headerlink\" title=\"表格标签\"></a>表格标签</h1><ol>\n<li>table</li>\n<li>thead, tbody, tfoot</li>\n<li>caption, col, th, tr, td</li>\n</ol>\n<h1 id=\"表单标签\"><a href=\"#表单标签\" class=\"headerlink\" title=\"表单标签\"></a>表单标签</h1><ol>\n<li>form</li>\n<li>input</li>\n<li>fieldset, legend, label,</li>\n<li>textarea, select</li>\n<li>optgroup, option</li>\n<li>button</li>\n<li>datalist, meter, output, progress</li>\n</ol>\n<h1 id=\"列表标签\"><a href=\"#列表标签\" class=\"headerlink\" title=\"列表标签\"></a>列表标签</h1><ol>\n<li>ul, ol, li</li>\n<li>dl, dt, dd</li>\n</ol>\n<h1 id=\"图像链接音频视频\"><a href=\"#图像链接音频视频\" class=\"headerlink\" title=\"图像链接音频视频\"></a>图像链接音频视频</h1><ol>\n<li>img, a, figure, figcaption</li>\n<li>video, audio</li>\n</ol>\n<h1 id=\"内嵌标签\"><a href=\"#内嵌标签\" class=\"headerlink\" title=\"内嵌标签\"></a>内嵌标签</h1><ol>\n<li>iframe 唯一可用的框架标签</li>\n<li>embed, object, source</li>\n</ol>\n<h1 id=\"文本格式标签\"><a href=\"#文本格式标签\" class=\"headerlink\" title=\"文本格式标签\"></a>文本格式标签</h1><ol>\n<li>h1-h6, p</li>\n<li>br, hr</li>\n<li>strong, i</li>\n<li>pre, sup, sub, blockquote</li>\n<li>time, data, mark</li>\n</ol>\n","categories":["前端"],"tags":["HTML"]},{"title":"HTML-文档定义","url":"http://yoursite.com/2017/08/06/HTML-文档定义/","content":"<h1 id=\"doctype\"><a href=\"#doctype\" class=\"headerlink\" title=\"doctype\"></a>doctype</h1><p>&lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器以何种模式来渲染文档。</html></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div></pre></td></tr></table></figure>\n<p>Html5没有严格模式和混杂模式的区分，它相对宽松的语法已经最大实现了向后兼容。</p>\n<h1 id=\"meta\"><a href=\"#meta\" class=\"headerlink\" title=\"meta\"></a>meta</h1><p>meta常用于定义页面的说明，关键字，最后修改日期，和其它的元数据。这些元数据将服务于浏览器（如何布局或重载页面），搜索引擎和其它网络服务。</p>\n<p>meta标签按照属性来分，一般可以分成常用的三种：charset、name和http-equiv</p>\n<h2 id=\"charset\"><a href=\"#charset\" class=\"headerlink\" title=\"charset\"></a>charset</h2><p>此特性声明当前文档所使用的字符编码，但该声明可以被任何一个元素的 lang 特性的值覆盖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><p>name属性主要用于描述网页，比如网页的关键词，叙述等。与之对应的属性值为content，content中的内容是对name填入类型的具体描述，便于搜索引擎抓取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta name=&quot;参数&quot; content=&quot;具体的描述&quot;&gt;。</div></pre></td></tr></table></figure>\n<p>常用有以下几种参数</p>\n<ol>\n<li><p>keywords 用于告诉搜索引擎，你网页的关键字。<br><code>&lt;meta name=&quot;keywords&quot; content=&quot;博客，前端&quot;&gt;</code></p>\n</li>\n<li><p>description 用于告诉搜索引擎，你网站的主要内容。<br><code>&lt;meta name=&quot;description&quot; content=&quot;热爱前端与编程，这是我的个人前端博客&quot;&gt;</code></p>\n</li>\n<li><p>viewport 常用于设计移动端网页<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></p>\n</li>\n<li><p>robots 告诉爬虫哪些页面需要索引，哪些页面不需要索引。<br><code>&lt;meta name=&quot;robots&quot; content=&quot;none&quot;&gt;</code></p>\n</li>\n<li><p>author 用于标注网页作者<br><code>&lt;meta name=&quot;author&quot; content=&quot;Robin&quot;&gt;</code></p>\n</li>\n<li><p>generator 用于标明网页是什么软件做的<br><code>&lt;meta name=&quot;generator&quot; content=&quot;Sublime Text3&quot;&gt;</code></p>\n</li>\n<li><p>copyright 用于标注版权信息<br><code>&lt;meta name=&quot;copyright&quot; content=&quot;个人版权所有&quot;&gt;</code></p>\n</li>\n<li><p>revisit-after 搜索引擎爬虫重访时间<br><code>&lt;meta name=&quot;revisit-after&quot; content=&quot;7 days&quot; &gt;</code></p>\n</li>\n<li><p>renderer 双核浏览器渲染方式<br><code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt; //默认webkit内核</code></p>\n</li>\n</ol>\n<h2 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h2><p>这个枚举属性定义了能改变服务器和用户引擎行为的编译。这个编译值使用content 来定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta http-equiv=&quot;参数&quot; content=&quot;具体的描述&quot;&gt;</div></pre></td></tr></table></figure>\n<p>常用的参数如下</p>\n<ol>\n<li>content-Type 用于设定网页字符集，便于浏览器解析与渲染页面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta http-equiv=&quot;content-Type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;  //旧的HTML，不推荐</div><div class=\"line\">&lt;meta charset=&quot;utf-8&quot;&gt; //HTML5设定网页字符集的方式，推荐使用UTF-8</div></pre></td></tr></table></figure>\n<ol>\n<li><p>X-UA-Compatible 浏览器采取何种版本渲染当前页面<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt; //指定IE和Chrome使用最新版本渲染当前页面</code></p>\n</li>\n<li><p>refresh 网页将在设定的时间内，自动刷新并调向设定的网址。<br><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;2；URL=https://www.github.com/&quot;&gt; //意思是2秒后跳转向Github</code></p>\n</li>\n<li><p>Set-Cookie 如果网页过期。那么这个网页存在本地的cookies也会被自动删除。<br><code>&lt;meta http-equiv=&quot;Set-Cookie&quot; content=&quot;User=Robin; path=/; expires=Sunday, 10-Jan-17 10:00:00 GMT&quot;&gt;</code></p>\n</li>\n<li><p>expires 用于设定网页的到期时间，过期后网页必须到服务器上重新传输。<br><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;Sunday 26 June 2017 01:00 GMT&quot; /&gt;</code></p>\n</li>\n<li><p>cache-control 指定请求和响应遵循的缓存机制（http 1.1）<br><code>&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</code><br>这表示先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</p>\n</li>\n<li><p>pragma 也是一个缓存机制属性，是http 1.0的<br><code>&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;</code></p>\n</li>\n</ol>\n<p><strong>http-equiv非常重要的一个用途是用来做http缓存控制，cache-control、expires配合last-modify等以及etag使用</strong>，这里不做赘述</p>\n<h1 id=\"语法与属性\"><a href=\"#语法与属性\" class=\"headerlink\" title=\"语法与属性\"></a>语法与属性</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><ol>\n<li>标签大小写皆可；</li>\n<li>布尔值属性若为true只需要写属性即可，例如checked=‘true’不需要写成checked=’checked’，可以写成checked；</li>\n<li>属性可以省略引号，但若属性中有空格则必须加上引号；<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2></li>\n<li>script的defer、async属性；</li>\n<li>内部作用域样式；</li>\n<li>data-key自定义属性；</li>\n<li>tabindex表示tab键的先后顺序；</li>\n<li>contenteditable页面内容是否可以编辑；</li>\n<li>designMode，写在script中的js属性，值为on时，表示整个页面内容皆可编辑；</li>\n</ol>\n","categories":["前端"],"tags":["HTML"]},{"title":"前端知识体系","url":"http://yoursite.com/2017/07/28/前端知识体系/","content":"<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><p><img src=\"/images/HTML.png\" alt=\"HTML知识总结\"></p>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><p>todo</p>\n<h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><p>todo</p>\n","categories":["前端"],"tags":["知识体系"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/css/fexo-personal.css","content":"\n/* 修改段落样式 */\n.article-content p {\n\tmargin: 1em 0 0 0;\n\tline-height: 1.8em;\n}\n\n/* p后面紧跟列表 */\n.article-content p + ol, .article-content p + ul {\n\tmargin-top: 0;\n}\n\n/* 设置一级列表的行高 */\nli{\n\tline-height: 1.8em;\n}\n/* 设置二级列表的行高 */\nli li {\n\tline-height: 1.5em;\n}\n\n/* 修改list-style 小圆点 颜色*/\n.article-content ul li:before {\n\tbackground-color: #555;\n}","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]}]